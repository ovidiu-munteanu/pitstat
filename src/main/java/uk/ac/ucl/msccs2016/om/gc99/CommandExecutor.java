package uk.ac.ucl.msccs2016.om.gc99;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

class CommandExecutor {
    private List<String> splitCommand;
    private boolean printCommand;
    private ThreadedStreamHandler inputStreamHandler, errorStreamHandler;

    CommandExecutor() {
        this.splitCommand = null;
    }

    /**
     * @param command string containing the command to be executed
     * @return return error code; 0 (zero) if no error
     */
    int execute(String command) {
        return execute(command, false);
    }

    /**
     * @param command      String containing the command to be executed
     * @param printCommand boolean indicating whether the command should be printed out to the standard output
     *                     true if the command should be printed out, false othewise
     * @return return error code; 0 (zero) if no error
     */
    int execute(String command, boolean printCommand) {
        if (command == null) {
            throw new NullPointerException("Command string is null.");
        } else if (command.length() == 0) {
            throw new IllegalArgumentException("Command string is empty.");
        }

        this.splitCommand = splitCommand(command);
        this.printCommand = printCommand;
        return execute();
    }

    /**
     * Get the standard output (stdout) from the command you just exec'd.
     */
    List<String> getStandardOutput() {
        return inputStreamHandler.getOutputBuffer();
    }

    /**
     * Get the standard error (stderr) from the command you just exec'd.
     */
    List<String> getStandardError() {
        return errorStreamHandler.getOutputBuffer();
    }

    /**
     * @return
     */
    private int execute() {
        int exitValue;

        if (printCommand)
            System.out.println("$ " + String.join(" ", splitCommand));

        try {

            ProcessBuilder processBuilder = new ProcessBuilder(splitCommand);

            Process process = processBuilder.start();

            inputStreamHandler = new ThreadedStreamHandler(process.getInputStream());
            errorStreamHandler = new ThreadedStreamHandler(process.getErrorStream());

            inputStreamHandler.start();
            errorStreamHandler.start();

            exitValue = process.waitFor();

            inputStreamHandler.interrupt();
            errorStreamHandler.interrupt();
            inputStreamHandler.join();
            errorStreamHandler.join();

        } catch (IOException e) {
            exitValue = 1;
        } catch (InterruptedException e) {
            // generated by process.waitFor() call
            exitValue = 2;
        }

        return exitValue;
    }

    /**
     * Passed as argument to CommandExecutor; splits command string into individual command components
     *
     * @param command String containing the command to be executed
     * @return ArrayList of strings containing the command components
     */
    private static List<String> splitCommand(String command) {
        return Arrays.asList(command.split("\\s+"));
    }
}







